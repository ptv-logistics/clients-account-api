/*
 * Account
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ptvgroup.developer.client.account.api;

import com.ptvgroup.developer.client.account.ApiClient;
import com.ptvgroup.developer.client.account.ApiException;
import com.ptvgroup.developer.client.account.ApiResponse;
import com.ptvgroup.developer.client.account.Pair;

import com.ptvgroup.developer.client.account.model.ErrorResponse;
import java.time.LocalDate;
import com.ptvgroup.developer.client.account.model.UsageResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T08:42:36.875563401Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class UsageApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public UsageApi() {
    this(new ApiClient());
  }

  public UsageApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
   * @param startDate The date from when on the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **startDate** is given, the response contains the usage only for this date. (optional)
   * @param endDate The date until when the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **endDate** is given, the response contains the usage only for this date. (optional)
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse getUsage(LocalDate startDate, LocalDate endDate) throws ApiException {
    ApiResponse<UsageResponse> localVarResponse = getUsageWithHttpInfo(startDate, endDate);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
   * @param startDate The date from when on the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **startDate** is given, the response contains the usage only for this date. (optional)
   * @param endDate The date until when the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **endDate** is given, the response contains the usage only for this date. (optional)
   * @return ApiResponse&lt;UsageResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UsageResponse> getUsageWithHttpInfo(LocalDate startDate, LocalDate endDate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUsageRequestBuilder(startDate, endDate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUsage", localVarResponse);
        }
        return new ApiResponse<UsageResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UsageResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUsageRequestBuilder(LocalDate startDate, LocalDate endDate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/usage-data/usage";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "startDate";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));
    localVarQueryParameterBaseName = "endDate";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
