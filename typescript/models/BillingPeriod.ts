/* tslint:disable */
/* eslint-disable */
/**
 * Account
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BillingPeriod
 */
export interface BillingPeriod {
    /**
     * The start date of the billing period formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @type {Date}
     * @memberof BillingPeriod
     */
    startDate?: Date;
    /**
     * The end date of the billing period formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @type {Date}
     * @memberof BillingPeriod
     */
    endDate?: Date;
}

/**
 * Check if a given object implements the BillingPeriod interface.
 */
export function instanceOfBillingPeriod(value: object): value is BillingPeriod {
    return true;
}

export function BillingPeriodFromJSON(json: any): BillingPeriod {
    return BillingPeriodFromJSONTyped(json, false);
}

export function BillingPeriodFromJSONTyped(json: any, ignoreDiscriminator: boolean): BillingPeriod {
    if (json == null) {
        return json;
    }
    return {
        
        'startDate': json['startDate'] == null ? undefined : (new Date(json['startDate'])),
        'endDate': json['endDate'] == null ? undefined : (new Date(json['endDate'])),
    };
}

export function BillingPeriodToJSON(json: any): BillingPeriod {
    return BillingPeriodToJSONTyped(json, false);
}

export function BillingPeriodToJSONTyped(value?: BillingPeriod | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'startDate': value['startDate'] == null ? undefined : ((value['startDate']).toISOString().substring(0,10)),
        'endDate': value['endDate'] == null ? undefined : ((value['endDate']).toISOString().substring(0,10)),
    };
}

