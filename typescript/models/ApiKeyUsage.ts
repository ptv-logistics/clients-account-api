/* tslint:disable */
/* eslint-disable */
/**
 * Account
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ServiceUsage } from './ServiceUsage';
import {
    ServiceUsageFromJSON,
    ServiceUsageFromJSONTyped,
    ServiceUsageToJSON,
    ServiceUsageToJSONTyped,
} from './ServiceUsage';

/**
 * 
 * @export
 * @interface ApiKeyUsage
 */
export interface ApiKeyUsage {
    /**
     * The first letters of the API key.
     * @type {string}
     * @memberof ApiKeyUsage
     */
    apiKey?: string;
    /**
     * The description of the API key.
     * @type {string}
     * @memberof ApiKeyUsage
     */
    description?: string;
    /**
     * True, if the API key has been deleted, false otherwise. Deleted API keys will still be included in usage calculations but cannot be used anymore.
     * @type {boolean}
     * @memberof ApiKeyUsage
     */
    deleted?: boolean;
    /**
     * This list contains the usage by service. Only services which have been used in the requested period will be returned.
     * @type {Array<ServiceUsage>}
     * @memberof ApiKeyUsage
     */
    services?: Array<ServiceUsage>;
    /**
     * Transactions charged by this API key.
     * @type {number}
     * @memberof ApiKeyUsage
     */
    transactions?: number;
    /**
     * Requests sent using this API key.
     * @type {number}
     * @memberof ApiKeyUsage
     */
    requests?: number;
}

/**
 * Check if a given object implements the ApiKeyUsage interface.
 */
export function instanceOfApiKeyUsage(value: object): value is ApiKeyUsage {
    return true;
}

export function ApiKeyUsageFromJSON(json: any): ApiKeyUsage {
    return ApiKeyUsageFromJSONTyped(json, false);
}

export function ApiKeyUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiKeyUsage {
    if (json == null) {
        return json;
    }
    return {
        
        'apiKey': json['apiKey'] == null ? undefined : json['apiKey'],
        'description': json['description'] == null ? undefined : json['description'],
        'deleted': json['deleted'] == null ? undefined : json['deleted'],
        'services': json['services'] == null ? undefined : ((json['services'] as Array<any>).map(ServiceUsageFromJSON)),
        'transactions': json['transactions'] == null ? undefined : json['transactions'],
        'requests': json['requests'] == null ? undefined : json['requests'],
    };
}

export function ApiKeyUsageToJSON(json: any): ApiKeyUsage {
    return ApiKeyUsageToJSONTyped(json, false);
}

export function ApiKeyUsageToJSONTyped(value?: ApiKeyUsage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'apiKey': value['apiKey'],
        'description': value['description'],
        'deleted': value['deleted'],
        'services': value['services'] == null ? undefined : ((value['services'] as Array<any>).map(ServiceUsageToJSON)),
        'transactions': value['transactions'],
        'requests': value['requests'],
    };
}

