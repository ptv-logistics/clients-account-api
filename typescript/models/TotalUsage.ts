/* tslint:disable */
/* eslint-disable */
/**
 * Account
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TotalServiceUsage } from './TotalServiceUsage';
import {
    TotalServiceUsageFromJSON,
    TotalServiceUsageFromJSONTyped,
    TotalServiceUsageToJSON,
    TotalServiceUsageToJSONTyped,
} from './TotalServiceUsage';

/**
 * The total usage of all API keys of the subscription for the requested period.
 * @export
 * @interface TotalUsage
 */
export interface TotalUsage {
    /**
     * The total usage by service for the requested period. Only services which have been used in the requested period will be returned.
     * @type {Array<TotalServiceUsage>}
     * @memberof TotalUsage
     */
    services?: Array<TotalServiceUsage>;
    /**
     * Transactions charged in total.
     * @type {number}
     * @memberof TotalUsage
     */
    transactions?: number;
    /**
     * Requests sent in total.
     * @type {number}
     * @memberof TotalUsage
     */
    requests?: number;
}

/**
 * Check if a given object implements the TotalUsage interface.
 */
export function instanceOfTotalUsage(value: object): value is TotalUsage {
    return true;
}

export function TotalUsageFromJSON(json: any): TotalUsage {
    return TotalUsageFromJSONTyped(json, false);
}

export function TotalUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): TotalUsage {
    if (json == null) {
        return json;
    }
    return {
        
        'services': json['services'] == null ? undefined : ((json['services'] as Array<any>).map(TotalServiceUsageFromJSON)),
        'transactions': json['transactions'] == null ? undefined : json['transactions'],
        'requests': json['requests'] == null ? undefined : json['requests'],
    };
}

export function TotalUsageToJSON(json: any): TotalUsage {
    return TotalUsageToJSONTyped(json, false);
}

export function TotalUsageToJSONTyped(value?: TotalUsage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'services': value['services'] == null ? undefined : ((value['services'] as Array<any>).map(TotalServiceUsageToJSON)),
        'transactions': value['transactions'],
        'requests': value['requests'],
    };
}

