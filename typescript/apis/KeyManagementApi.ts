/* tslint:disable */
/* eslint-disable */
/**
 * Account
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKeyResponse,
  ApiKeysResponse,
  ErrorResponse,
} from '../models/index';
import {
    ApiKeyResponseFromJSON,
    ApiKeyResponseToJSON,
    ApiKeysResponseFromJSON,
    ApiKeysResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface CreateApiKeyRequest {
    description: string;
}

export interface DeleteApiKeyRequest {
    apiKey: string;
}

export interface UpdateApiKeyRequest {
    apiKey: string;
    description: string;
}

/**
 * 
 */
export class KeyManagementApi extends runtime.BaseAPI {

    /**
     * Create a new API key.
     */
    async createApiKeyRaw(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyResponse>> {
        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling createApiKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * Create a new API key.
     */
    async createApiKey(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyResponse> {
        const response = await this.createApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an API key.
     */
    async deleteApiKeyRaw(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['apiKey'] == null) {
            throw new runtime.RequiredError(
                'apiKey',
                'Required parameter "apiKey" was null or undefined when calling deleteApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys/{apiKey}`.replace(`{${"apiKey"}}`, encodeURIComponent(String(requestParameters['apiKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an API key.
     */
    async deleteApiKey(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Get all API keys of the current subscription.
     */
    async getApiKeysRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeysResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeysResponseFromJSON(jsonValue));
    }

    /**
     * Get all API keys of the current subscription.
     */
    async getApiKeys(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeysResponse> {
        const response = await this.getApiKeysRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update the description of an API key.
     */
    async updateApiKeyRaw(requestParameters: UpdateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyResponse>> {
        if (requestParameters['apiKey'] == null) {
            throw new runtime.RequiredError(
                'apiKey',
                'Required parameter "apiKey" was null or undefined when calling updateApiKey().'
            );
        }

        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling updateApiKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys/{apiKey}`.replace(`{${"apiKey"}}`, encodeURIComponent(String(requestParameters['apiKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * Update the description of an API key.
     */
    async updateApiKey(requestParameters: UpdateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyResponse> {
        const response = await this.updateApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
