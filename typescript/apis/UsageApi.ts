/* tslint:disable */
/* eslint-disable */
/**
 * Account
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  UsageResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UsageResponseFromJSON,
    UsageResponseToJSON,
} from '../models/index';

export interface GetUsageRequest {
    startDate?: Date;
    endDate?: Date;
}

/**
 * 
 */
export class UsageApi extends runtime.BaseAPI {

    /**
     * Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
     */
    async getUsageRaw(requestParameters: GetUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsageResponse>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/usage-data/usage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsageResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
     */
    async getUsage(requestParameters: GetUsageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsageResponse> {
        const response = await this.getUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
