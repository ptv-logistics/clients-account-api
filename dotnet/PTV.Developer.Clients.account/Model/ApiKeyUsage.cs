/*
 * Account
 *
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.account.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.account.Model
{
    /// <summary>
    /// ApiKeyUsage
    /// </summary>
    [DataContract(Name = "ApiKeyUsage")]
    public partial class ApiKeyUsage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeyUsage" /> class.
        /// </summary>
        /// <param name="apiKey">The first letters of the API key..</param>
        /// <param name="description">The description of the API key..</param>
        /// <param name="deleted">True, if the API key has been deleted, false otherwise. Deleted API keys will still be included in usage calculations but cannot be used anymore..</param>
        /// <param name="services">This list contains the usage by service. Only services which have been used in the requested period will be returned..</param>
        /// <param name="transactions">Transactions charged by this API key..</param>
        /// <param name="requests">Requests sent using this API key..</param>
        public ApiKeyUsage(string apiKey = default(string), string description = default(string), bool? deleted = default(bool?), List<ServiceUsage> services = default(List<ServiceUsage>), double? transactions = default(double?), int? requests = default(int?))
        {
            this.ApiKey = apiKey;
            this.Description = description;
            this.Deleted = deleted;
            this.Services = services;
            this.Transactions = transactions;
            this.Requests = requests;
        }

        /// <summary>
        /// The first letters of the API key.
        /// </summary>
        /// <value>The first letters of the API key.</value>
        [DataMember(Name = "apiKey", EmitDefaultValue = true)]
        public string ApiKey { get; set; }

        /// <summary>
        /// The description of the API key.
        /// </summary>
        /// <value>The description of the API key.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// True, if the API key has been deleted, false otherwise. Deleted API keys will still be included in usage calculations but cannot be used anymore.
        /// </summary>
        /// <value>True, if the API key has been deleted, false otherwise. Deleted API keys will still be included in usage calculations but cannot be used anymore.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// This list contains the usage by service. Only services which have been used in the requested period will be returned.
        /// </summary>
        /// <value>This list contains the usage by service. Only services which have been used in the requested period will be returned.</value>
        [DataMember(Name = "services", EmitDefaultValue = false)]
        public List<ServiceUsage> Services { get; set; }

        /// <summary>
        /// Transactions charged by this API key.
        /// </summary>
        /// <value>Transactions charged by this API key.</value>
        [DataMember(Name = "transactions", EmitDefaultValue = true)]
        public double? Transactions { get; set; }

        /// <summary>
        /// Requests sent using this API key.
        /// </summary>
        /// <value>Requests sent using this API key.</value>
        [DataMember(Name = "requests", EmitDefaultValue = true)]
        public int? Requests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiKeyUsage {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Requests: ").Append(Requests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
