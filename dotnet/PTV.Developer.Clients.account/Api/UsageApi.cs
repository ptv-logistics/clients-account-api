/*
 * Account
 *
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.account.Client;
using PTV.Developer.Clients.account.Model;

namespace PTV.Developer.Clients.account.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsageApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The date from when on the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **startDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="endDate">The date until when the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **endDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UsageResponse</returns>
        UsageResponse GetUsage(DateOnly? startDate = default(DateOnly?), DateOnly? endDate = default(DateOnly?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The date from when on the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **startDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="endDate">The date until when the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **endDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UsageResponse</returns>
        ApiResponse<UsageResponse> GetUsageWithHttpInfo(DateOnly? startDate = default(DateOnly?), DateOnly? endDate = default(DateOnly?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsageApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The date from when on the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **startDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="endDate">The date until when the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **endDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UsageResponse</returns>
        System.Threading.Tasks.Task<UsageResponse> GetUsageAsync(DateOnly? startDate = default(DateOnly?), DateOnly? endDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The date from when on the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **startDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="endDate">The date until when the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **endDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UsageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsageResponse>> GetUsageWithHttpInfoAsync(DateOnly? startDate = default(DateOnly?), DateOnly? endDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsageApi : IUsageApiSync, IUsageApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsageApi : IUsageApi
    {
        private PTV.Developer.Clients.account.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsageApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsageApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.account.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.account.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.account.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.account.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.account.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.account.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsageApi(PTV.Developer.Clients.account.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.account.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.account.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.account.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.account.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.account.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsageApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsageApi(PTV.Developer.Clients.account.Client.ISynchronousClient client, PTV.Developer.Clients.account.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.account.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.account.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.account.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.account.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.account.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.account.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The date from when on the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **startDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="endDate">The date until when the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **endDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UsageResponse</returns>
        public UsageResponse GetUsage(DateOnly? startDate = default(DateOnly?), DateOnly? endDate = default(DateOnly?), int operationIndex = 0)
        {
            PTV.Developer.Clients.account.Client.ApiResponse<UsageResponse> localVarResponse = GetUsageWithHttpInfo(startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The date from when on the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **startDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="endDate">The date until when the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **endDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UsageResponse</returns>
        public PTV.Developer.Clients.account.Client.ApiResponse<UsageResponse> GetUsageWithHttpInfo(DateOnly? startDate = default(DateOnly?), DateOnly? endDate = default(DateOnly?), int operationIndex = 0)
        {
            PTV.Developer.Clients.account.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.account.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.account.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.account.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            localVarRequestOptions.Operation = "UsageApi.GetUsage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UsageResponse>("/usage-data/usage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The date from when on the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **startDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="endDate">The date until when the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **endDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UsageResponse</returns>
        public async System.Threading.Tasks.Task<UsageResponse> GetUsageAsync(DateOnly? startDate = default(DateOnly?), DateOnly? endDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.account.Client.ApiResponse<UsageResponse> localVarResponse = await GetUsageWithHttpInfoAsync(startDate, endDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the usage for the given period.  If neither **startDate** nor **endDate** is given, the response contains the usage for the current billing period. The requested period must not exceed 60 days. A date denotes the day from 00:00:00+00:00 until 23:59:59+00:00 based on Coordinated Universal Time (UTC).
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The date from when on the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **startDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="endDate">The date until when the usage is requested formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If only the **endDate** is given, the response contains the usage only for this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UsageResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.account.Client.ApiResponse<UsageResponse>> GetUsageWithHttpInfoAsync(DateOnly? startDate = default(DateOnly?), DateOnly? endDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.account.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.account.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.account.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.account.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            localVarRequestOptions.Operation = "UsageApi.GetUsage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UsageResponse>("/usage-data/usage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
