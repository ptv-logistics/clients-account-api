/*
 * Account
 *
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.account.Client;
using PTV.Developer.Clients.account.Model;

namespace PTV.Developer.Clients.account.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeyManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiKeyResponse</returns>
        ApiKeyResponse CreateApiKey(string description, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiKeyResponse</returns>
        ApiResponse<ApiKeyResponse> CreateApiKeyWithHttpInfo(string description, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteApiKey(string apiKey, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiKeyWithHttpInfo(string apiKey, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all API keys of the current subscription.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiKeysResponse</returns>
        ApiKeysResponse GetApiKeys(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all API keys of the current subscription.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiKeysResponse</returns>
        ApiResponse<ApiKeysResponse> GetApiKeysWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the description of an API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be updated.</param>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiKeyResponse</returns>
        ApiKeyResponse UpdateApiKey(string apiKey, string description, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the description of an API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be updated.</param>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiKeyResponse</returns>
        ApiResponse<ApiKeyResponse> UpdateApiKeyWithHttpInfo(string apiKey, string description, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeyManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKeyResponse</returns>
        System.Threading.Tasks.Task<ApiKeyResponse> CreateApiKeyAsync(string description, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyResponse>> CreateApiKeyWithHttpInfoAsync(string description, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiKeyAsync(string apiKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiKeyWithHttpInfoAsync(string apiKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all API keys of the current subscription.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKeysResponse</returns>
        System.Threading.Tasks.Task<ApiKeysResponse> GetApiKeysAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all API keys of the current subscription.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKeysResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeysResponse>> GetApiKeysWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the description of an API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be updated.</param>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKeyResponse</returns>
        System.Threading.Tasks.Task<ApiKeyResponse> UpdateApiKeyAsync(string apiKey, string description, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the description of an API key.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be updated.</param>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyResponse>> UpdateApiKeyWithHttpInfoAsync(string apiKey, string description, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeyManagementApi : IKeyManagementApiSync, IKeyManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KeyManagementApi : IKeyManagementApi
    {
        private PTV.Developer.Clients.account.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeyManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeyManagementApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeyManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeyManagementApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.account.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.account.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.account.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.account.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.account.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.account.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeyManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeyManagementApi(PTV.Developer.Clients.account.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.account.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.account.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.account.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.account.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.account.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeyManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public KeyManagementApi(PTV.Developer.Clients.account.Client.ISynchronousClient client, PTV.Developer.Clients.account.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.account.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.account.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.account.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.account.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.account.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.account.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a new API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiKeyResponse</returns>
        public ApiKeyResponse CreateApiKey(string description, int operationIndex = 0)
        {
            PTV.Developer.Clients.account.Client.ApiResponse<ApiKeyResponse> localVarResponse = CreateApiKeyWithHttpInfo(description);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiKeyResponse</returns>
        public PTV.Developer.Clients.account.Client.ApiResponse<ApiKeyResponse> CreateApiKeyWithHttpInfo(string description, int operationIndex = 0)
        {
            // verify the required parameter 'description' is set
            if (description == null)
            {
                throw new PTV.Developer.Clients.account.Client.ApiException(400, "Missing required parameter 'description' when calling KeyManagementApi->CreateApiKey");
            }

            PTV.Developer.Clients.account.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.account.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.account.Client.ClientUtils.ParameterToMultiMap("", "description", description));

            localVarRequestOptions.Operation = "KeyManagementApi.CreateApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiKeyResponse>("/api-keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKeyResponse</returns>
        public async System.Threading.Tasks.Task<ApiKeyResponse> CreateApiKeyAsync(string description, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.account.Client.ApiResponse<ApiKeyResponse> localVarResponse = await CreateApiKeyWithHttpInfoAsync(description, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.account.Client.ApiResponse<ApiKeyResponse>> CreateApiKeyWithHttpInfoAsync(string description, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'description' is set
            if (description == null)
            {
                throw new PTV.Developer.Clients.account.Client.ApiException(400, "Missing required parameter 'description' when calling KeyManagementApi->CreateApiKey");
            }


            PTV.Developer.Clients.account.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.account.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.account.Client.ClientUtils.ParameterToMultiMap("", "description", description));

            localVarRequestOptions.Operation = "KeyManagementApi.CreateApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiKeyResponse>("/api-keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteApiKey(string apiKey, int operationIndex = 0)
        {
            DeleteApiKeyWithHttpInfo(apiKey);
        }

        /// <summary>
        ///  Delete an API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PTV.Developer.Clients.account.Client.ApiResponse<Object> DeleteApiKeyWithHttpInfo(string apiKey, int operationIndex = 0)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new PTV.Developer.Clients.account.Client.ApiException(400, "Missing required parameter 'apiKey' when calling KeyManagementApi->DeleteApiKey");
            }

            PTV.Developer.Clients.account.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.account.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiKey", PTV.Developer.Clients.account.Client.ClientUtils.ParameterToString(apiKey)); // path parameter

            localVarRequestOptions.Operation = "KeyManagementApi.DeleteApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api-keys/{apiKey}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiKeyAsync(string apiKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteApiKeyWithHttpInfoAsync(apiKey, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete an API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.account.Client.ApiResponse<Object>> DeleteApiKeyWithHttpInfoAsync(string apiKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new PTV.Developer.Clients.account.Client.ApiException(400, "Missing required parameter 'apiKey' when calling KeyManagementApi->DeleteApiKey");
            }


            PTV.Developer.Clients.account.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.account.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiKey", PTV.Developer.Clients.account.Client.ClientUtils.ParameterToString(apiKey)); // path parameter

            localVarRequestOptions.Operation = "KeyManagementApi.DeleteApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api-keys/{apiKey}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all API keys of the current subscription.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiKeysResponse</returns>
        public ApiKeysResponse GetApiKeys(int operationIndex = 0)
        {
            PTV.Developer.Clients.account.Client.ApiResponse<ApiKeysResponse> localVarResponse = GetApiKeysWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all API keys of the current subscription.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiKeysResponse</returns>
        public PTV.Developer.Clients.account.Client.ApiResponse<ApiKeysResponse> GetApiKeysWithHttpInfo(int operationIndex = 0)
        {
            PTV.Developer.Clients.account.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.account.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "KeyManagementApi.GetApiKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiKeysResponse>("/api-keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all API keys of the current subscription.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKeysResponse</returns>
        public async System.Threading.Tasks.Task<ApiKeysResponse> GetApiKeysAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.account.Client.ApiResponse<ApiKeysResponse> localVarResponse = await GetApiKeysWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all API keys of the current subscription.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKeysResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.account.Client.ApiResponse<ApiKeysResponse>> GetApiKeysWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.account.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.account.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "KeyManagementApi.GetApiKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiKeysResponse>("/api-keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the description of an API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be updated.</param>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiKeyResponse</returns>
        public ApiKeyResponse UpdateApiKey(string apiKey, string description, int operationIndex = 0)
        {
            PTV.Developer.Clients.account.Client.ApiResponse<ApiKeyResponse> localVarResponse = UpdateApiKeyWithHttpInfo(apiKey, description);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the description of an API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be updated.</param>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiKeyResponse</returns>
        public PTV.Developer.Clients.account.Client.ApiResponse<ApiKeyResponse> UpdateApiKeyWithHttpInfo(string apiKey, string description, int operationIndex = 0)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new PTV.Developer.Clients.account.Client.ApiException(400, "Missing required parameter 'apiKey' when calling KeyManagementApi->UpdateApiKey");
            }

            // verify the required parameter 'description' is set
            if (description == null)
            {
                throw new PTV.Developer.Clients.account.Client.ApiException(400, "Missing required parameter 'description' when calling KeyManagementApi->UpdateApiKey");
            }

            PTV.Developer.Clients.account.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.account.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiKey", PTV.Developer.Clients.account.Client.ClientUtils.ParameterToString(apiKey)); // path parameter
            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.account.Client.ClientUtils.ParameterToMultiMap("", "description", description));

            localVarRequestOptions.Operation = "KeyManagementApi.UpdateApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiKeyResponse>("/api-keys/{apiKey}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the description of an API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be updated.</param>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKeyResponse</returns>
        public async System.Threading.Tasks.Task<ApiKeyResponse> UpdateApiKeyAsync(string apiKey, string description, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.account.Client.ApiResponse<ApiKeyResponse> localVarResponse = await UpdateApiKeyWithHttpInfoAsync(apiKey, description, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the description of an API key.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.account.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The API key to be updated.</param>
        /// <param name="description">The description of the API key.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.account.Client.ApiResponse<ApiKeyResponse>> UpdateApiKeyWithHttpInfoAsync(string apiKey, string description, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new PTV.Developer.Clients.account.Client.ApiException(400, "Missing required parameter 'apiKey' when calling KeyManagementApi->UpdateApiKey");
            }

            // verify the required parameter 'description' is set
            if (description == null)
            {
                throw new PTV.Developer.Clients.account.Client.ApiException(400, "Missing required parameter 'description' when calling KeyManagementApi->UpdateApiKey");
            }


            PTV.Developer.Clients.account.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.account.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.account.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiKey", PTV.Developer.Clients.account.Client.ClientUtils.ParameterToString(apiKey)); // path parameter
            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.account.Client.ClientUtils.ParameterToMultiMap("", "description", description));

            localVarRequestOptions.Operation = "KeyManagementApi.UpdateApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiKeyResponse>("/api-keys/{apiKey}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
